{"ast":null,"code":"import React,{useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function About(props){const[myStyle,setStyle]=useState({color:\"black\",backgroundColor:\"white\"});const[btnText,setBtnText]=useState(\"Enable Dark Mode\");const toggleStyle=()=>{if(myStyle.color===\"black\"){setStyle({color:\"white\",backgroundColor:\"black\"});// let newText = \"Enable Light Mode\";\nsetBtnText(\"Enable Light Mode\");}else{setStyle({color:\"black\",backgroundColor:\"white\"});// let newText = \"Enable Dark Mode\";\nsetBtnText(\"Enable Dark Mode\");}};return/*#__PURE__*/_jsx(\"div\",{className:\" py-4\",style:myStyle,children:/*#__PURE__*/_jsxs(\"div\",{className:\"container py-4\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"mb-3\",children:\"About Us\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"accordion\",id:\"accordionExample\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"accordion-item\",style:myStyle,children:[/*#__PURE__*/_jsx(\"h2\",{className:\"accordion-header\",id:\"headingOne\",children:/*#__PURE__*/_jsx(\"button\",{style:myStyle,className:\"accordion-button\",type:\"button\",\"data-bs-toggle\":\"collapse\",\"data-bs-target\":\"#collapseOne\",\"aria-expanded\":\"true\",\"aria-controls\":\"collapseOne\",children:\"Accordion Item #1\"})}),/*#__PURE__*/_jsx(\"div\",{id:\"collapseOne\",className:\"accordion-collapse collapse show\",\"aria-labelledby\":\"headingOne\",\"data-bs-parent\":\"#accordionExample\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"accordion-body\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"This is the first item's accordion body.\"}),\" It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\",\" \",/*#__PURE__*/_jsx(\"code\",{children:\".accordion-body\"}),\", though the transition does limit overflow.\"]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"accordion-item\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"accordion-header\",id:\"headingTwo\",children:/*#__PURE__*/_jsx(\"button\",{style:myStyle,className:\"accordion-button collapsed\",type:\"button\",\"data-bs-toggle\":\"collapse\",\"data-bs-target\":\"#collapseTwo\",\"aria-expanded\":\"false\",\"aria-controls\":\"collapseTwo\",children:\"Accordion Item #2\"})}),/*#__PURE__*/_jsx(\"div\",{id:\"collapseTwo\",className:\"accordion-collapse collapse\",\"aria-labelledby\":\"headingTwo\",\"data-bs-parent\":\"#accordionExample\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"accordion-body\",style:myStyle,children:[/*#__PURE__*/_jsx(\"strong\",{children:\"This is the second item's accordion body.\"}),\" It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\",\" \",/*#__PURE__*/_jsx(\"code\",{children:\".accordion-body\"}),\", though the transition does limit overflow.\"]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"accordion-item\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"accordion-header\",id:\"headingThree\",children:/*#__PURE__*/_jsx(\"button\",{style:myStyle,className:\"accordion-button collapsed\",type:\"button\",\"data-bs-toggle\":\"collapse\",\"data-bs-target\":\"#collapseThree\",\"aria-expanded\":\"false\",\"aria-controls\":\"collapseThree\",children:\"Accordion Item #3\"})}),/*#__PURE__*/_jsx(\"div\",{id:\"collapseThree\",className:\"accordion-collapse collapse\",\"aria-labelledby\":\"headingThree\",\"data-bs-parent\":\"#accordionExample\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"accordion-body\",style:myStyle,children:[/*#__PURE__*/_jsx(\"strong\",{children:\"This is the third item's accordion body.\"}),\" It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\",\" \",/*#__PURE__*/_jsx(\"code\",{children:\".accordion-body\"}),\", though the transition does limit overflow.\"]})})]})]}),/*#__PURE__*/_jsx(\"button\",{onClick:toggleStyle,className:\"btn btn-primary mt-3\",children:btnText})]})});}","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","About","props","myStyle","setStyle","color","backgroundColor","btnText","setBtnText","toggleStyle","className","style","children","id","type","onClick"],"sources":["D:/Jag Practice/React/07 March/TextUtils/src/Pages/About.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function About(props) {\r\n  const [myStyle, setStyle] = useState({\r\n    color: \"black\",\r\n    backgroundColor: \"white\",\r\n  });\r\n  const [btnText, setBtnText] = useState(\"Enable Dark Mode\");\r\n\r\n  const toggleStyle = () => {\r\n    if (myStyle.color === \"black\") {\r\n      setStyle({\r\n        color: \"white\",\r\n        backgroundColor: \"black\",\r\n      });\r\n      // let newText = \"Enable Light Mode\";\r\n      setBtnText(\"Enable Light Mode\");\r\n    } else {\r\n      setStyle({\r\n        color: \"black\",\r\n        backgroundColor: \"white\",\r\n      });\r\n      // let newText = \"Enable Dark Mode\";\r\n      setBtnText(\"Enable Dark Mode\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\" py-4\" style={myStyle}>\r\n      <div className=\"container py-4\">\r\n        <h1 className=\"mb-3\">About Us</h1>\r\n        {/* <span>{props.name2112ee}</span> */}\r\n        <div className=\"accordion\" id=\"accordionExample\">\r\n          <div className=\"accordion-item\" style={myStyle}>\r\n            <h2 className=\"accordion-header\" id=\"headingOne\">\r\n              <button\r\n                style={myStyle}\r\n                className=\"accordion-button\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseOne\"\r\n                aria-expanded=\"true\"\r\n                aria-controls=\"collapseOne\"\r\n              >\r\n                Accordion Item #1\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseOne\"\r\n              className=\"accordion-collapse collapse show\"\r\n              aria-labelledby=\"headingOne\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\">\r\n                <strong>This is the first item's accordion body.</strong> It is\r\n                shown by default, until the collapse plugin adds the appropriate\r\n                classNamees that we use to style each element. These classNamees\r\n                control the overall appearance, as well as the showing and\r\n                hiding via CSS transitions. You can modify any of this with\r\n                custom CSS or overriding our default variables. It's also worth\r\n                noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n              <button\r\n                style={myStyle}\r\n                className=\"accordion-button collapsed\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseTwo\"\r\n                aria-expanded=\"false\"\r\n                aria-controls=\"collapseTwo\"\r\n              >\r\n                Accordion Item #2\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseTwo\"\r\n              className=\"accordion-collapse collapse\"\r\n              aria-labelledby=\"headingTwo\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\" style={myStyle}>\r\n                <strong>This is the second item's accordion body.</strong> It is\r\n                hidden by default, until the collapse plugin adds the\r\n                appropriate classNamees that we use to style each element. These\r\n                classNamees control the overall appearance, as well as the\r\n                showing and hiding via CSS transitions. You can modify any of\r\n                this with custom CSS or overriding our default variables. It's\r\n                also worth noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingThree\">\r\n              <button\r\n                style={myStyle}\r\n                className=\"accordion-button collapsed\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseThree\"\r\n                aria-expanded=\"false\"\r\n                aria-controls=\"collapseThree\"\r\n              >\r\n                Accordion Item #3\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseThree\"\r\n              className=\"accordion-collapse collapse\"\r\n              aria-labelledby=\"headingThree\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\" style={myStyle}>\r\n                <strong>This is the third item's accordion body.</strong> It is\r\n                hidden by default, until the collapse plugin adds the\r\n                appropriate classNamees that we use to style each element. These\r\n                classNamees control the overall appearance, as well as the\r\n                showing and hiding via CSS transitions. You can modify any of\r\n                this with custom CSS or overriding our default variables. It's\r\n                also worth noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button onClick={toggleStyle} className=\"btn btn-primary mt-3\">\r\n          {btnText}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}